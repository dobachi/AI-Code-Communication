#!/bin/bash
# Project initialization script for Claude Code Communication
# Creates a new empty project with standard structure

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Help function
show_help() {
    cat << EOF
🚀 Claude Code Communication - Project Initializer

USAGE:
    project-init <project-name> [options]

ARGUMENTS:
    project-name    Name of the new project (required)

OPTIONS:
    -g, --git       Initialize git repositories
    -r, --remote    GitHub remote repository base URL
    -h, --help      Show this help message

EXAMPLES:
    project-init my-new-project
    project-init my-project --git
    project-init my-project --git --remote git@github.com:user

The script will create:
    projects/<project-name>/
    ├── workspace/
    │   ├── president/      # Main repository
    │   ├── boss1/         # Boss1 workspace  
    │   ├── worker1/       # Worker1 workspace
    │   ├── worker2/       # Worker2 workspace
    │   └── worker3/       # Worker3 workspace
    ├── checkpoint/        # Project checkpoints
    ├── instructions/      # Project instructions
    ├── config/           # Configuration files
    └── shared/           # Shared resources
EOF
}

# Parse arguments
PROJECT_NAME=""
INIT_GIT=false
REMOTE_BASE=""

while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_help
            exit 0
            ;;
        -g|--git)
            INIT_GIT=true
            shift
            ;;
        -r|--remote)
            REMOTE_BASE="$2"
            shift 2
            ;;
        -*)
            echo -e "${RED}Error: Unknown option $1${NC}" >&2
            echo "Use --help for usage information."
            exit 1
            ;;
        *)
            if [[ -z "$PROJECT_NAME" ]]; then
                PROJECT_NAME="$1"
            else
                echo -e "${RED}Error: Multiple project names specified${NC}" >&2
                exit 1
            fi
            shift
            ;;
    esac
done

# Validate project name
if [[ -z "$PROJECT_NAME" ]]; then
    echo -e "${RED}Error: Project name is required${NC}" >&2
    echo "Use --help for usage information."
    exit 1
fi

# Validate project name format
if [[ ! "$PROJECT_NAME" =~ ^[a-zA-Z0-9_-]+$ ]]; then
    echo -e "${RED}Error: Project name can only contain letters, numbers, hyphens, and underscores${NC}" >&2
    exit 1
fi

# Check if project already exists
PROJECT_DIR="projects/$PROJECT_NAME"
if [[ -d "$PROJECT_DIR" ]]; then
    echo -e "${RED}Error: Project '$PROJECT_NAME' already exists${NC}" >&2
    exit 1
fi

echo -e "${BLUE}🚀 Creating new project: $PROJECT_NAME${NC}"
echo

# Create project structure
echo -e "${YELLOW}📁 Creating project structure...${NC}"
mkdir -p "$PROJECT_DIR"/{workspace/{president,boss1,worker1,worker2,worker3},checkpoint,instructions/roles,config,shared/{scripts,templates}}

# Create project instructions
echo -e "${YELLOW}📝 Creating project instructions...${NC}"
cat > "$PROJECT_DIR/instructions/project.md" << EOF
# $PROJECT_NAME プロジェクト

## プロジェクト概要
- **プロジェクト名**: $PROJECT_NAME
- **作成日**: $(date +"%Y-%m-%d")
- **状態**: 初期化完了

## プロジェクト構造
\`\`\`
$PROJECT_NAME/
├── workspace/          # 開発ワークスペース
│   ├── president/      # メインリポジトリ
│   ├── boss1/         # Boss1ワークスペース
│   ├── worker1/       # Worker1ワークスペース
│   ├── worker2/       # Worker2ワークスペース
│   └── worker3/       # Worker3ワークスペース
├── checkpoint/        # プロジェクトチェックポイント
├── instructions/      # プロジェクト指示書
├── config/           # 設定ファイル
└── shared/           # 共有リソース
\`\`\`

## 開発チーム
- **President**: プロジェクト統括・調整
- **Boss1**: チーム管理・統合
- **Worker1-3**: 開発実装

## 次のステップ
1. プロジェクト要件の定義
2. 技術スタックの選定
3. 開発環境のセットアップ
4. 実装開始
EOF

# Create initial checkpoint
echo -e "${YELLOW}📋 Creating initial checkpoint...${NC}"
cat > "$PROJECT_DIR/checkpoint/initial_setup.md" << EOF
# 🆕 $PROJECT_NAME - Initial Setup

## プロジェクト作成情報
- **作成日時**: $(date +"%Y-%m-%d %H:%M:%S")
- **作成者**: Claude Code Communication
- **状態**: 空のプロジェクト

## ディレクトリ構造
\`\`\`
$PROJECT_NAME/
├── workspace/          # すべて空
├── checkpoint/        # このファイルのみ
├── instructions/      # プロジェクト指示書
├── config/           # 空
└── shared/           # 空
\`\`\`

## 次のアクション
ユーザーの指示を待機中
EOF

# Create workspace READMEs
echo -e "${YELLOW}📄 Creating workspace documentation...${NC}"
for workspace in president boss1 worker1 worker2 worker3; do
    cat > "$PROJECT_DIR/workspace/$workspace/README.md" << EOF
# $workspace Workspace

This is the $workspace workspace for the $PROJECT_NAME project.

## Status
🚧 Empty workspace - ready for development

## Next Steps
- Define workspace-specific requirements
- Set up development environment
- Begin implementation
EOF
done

# Create .gitignore for project repository
echo -e "${YELLOW}📝 Creating .gitignore...${NC}"
cat > "$PROJECT_DIR/.gitignore" << EOF
# IDEs
.vscode/
.idea/
*.swp
*.swo
*~

# OS
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Logs
logs/
*.log

# Temporary files
tmp/
temp/
*.tmp
*.temp

# Workspace - managed as separate repositories
workspace/
EOF

# Initialize git repositories if requested
if [[ "$INIT_GIT" == true ]]; then
    echo -e "${YELLOW}🔧 Initializing git repositories...${NC}"
    
    # Initialize project root repository (project management)
    cd "$PROJECT_DIR"
    git init
    git branch -m main
    
    # Add initial project files (workspace is gitignored)
    git add .
    git commit -m "Initial project structure

Project management repository for $PROJECT_NAME

🤖 Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>"
    
    # Add remote if specified
    if [[ -n "$REMOTE_BASE" ]]; then
        echo -e "${YELLOW}🌐 Adding project remote repository...${NC}"
        git remote add origin "${REMOTE_BASE}/${PROJECT_NAME}-project.git"
        echo -e "${GREEN}  Project remote added: ${REMOTE_BASE}/${PROJECT_NAME}-project.git${NC}"
    fi
    
    # Initialize president workspace as separate repository (main development)
    echo -e "${YELLOW}🔧 Initializing president workspace repository...${NC}"
    cd workspace/president
    git init
    git branch -m main
    
    # Create basic README for president
    cat > README.md << EOF
# $PROJECT_NAME

Main development repository for $PROJECT_NAME project.

## Project Status

🚧 Initial setup phase

## Getting Started

Development setup instructions will be added here.

## Related Repositories

- Project Management: ${REMOTE_BASE:+${REMOTE_BASE}/${PROJECT_NAME}-project.git}

## License

MIT License
EOF
    
    git add README.md
    git commit -m "Initial commit

Main development repository for $PROJECT_NAME

🤖 Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>"
    
    # Add remote for president workspace if specified
    if [[ -n "$REMOTE_BASE" ]]; then
        echo -e "${YELLOW}🌐 Adding president remote repository...${NC}"
        git remote add origin "${REMOTE_BASE}/${PROJECT_NAME}.git"
        echo -e "${GREEN}  President remote added: ${REMOTE_BASE}/${PROJECT_NAME}.git${NC}"
    fi
    
    cd ../../..
fi

echo
echo -e "${GREEN}✅ Project '$PROJECT_NAME' created successfully!${NC}"
echo
echo -e "${BLUE}📁 Project location:${NC} $PROJECT_DIR"
echo -e "${BLUE}🏗️  Structure:${NC}"
echo "   ├── workspace/president    (main repository)"
echo "   ├── workspace/boss1        (boss1 workspace)"
echo "   ├── workspace/worker1-3    (worker workspaces)"
echo "   ├── checkpoint/            (project checkpoints)"
echo "   └── instructions/          (project instructions)"

if [[ "$INIT_GIT" == true ]]; then
    echo
    echo -e "${BLUE}🔧 Git repositories:${NC}"
    echo "   ├── Project management: initialized (workspace/ gitignored)"
    echo "   └── President workspace: initialized as separate repository"
    
    if [[ -n "$REMOTE_BASE" ]]; then
        echo
        echo -e "${BLUE}🌐 Remote repositories configured:${NC}"
        echo "   ├── Project management: ${REMOTE_BASE}/${PROJECT_NAME}-project.git"
        echo "   └── Main development:   ${REMOTE_BASE}/${PROJECT_NAME}.git"
        echo
        echo -e "${YELLOW}💡 Repository separation:${NC}"
        echo "   • Project repository: manages structure, instructions, checkpoints"
        echo "   • President repository: main development branch (independent)"
        echo
        echo -e "${YELLOW}💡 Don't forget to create both repositories on GitHub before pushing!${NC}"
    fi
fi

echo
echo -e "${BLUE}🚀 Next steps:${NC}"
echo "   1. cd $PROJECT_DIR"
echo "   2. Define project requirements"
echo "   3. Start development"
echo
echo -e "${GREEN}Happy coding! 🎉${NC}"