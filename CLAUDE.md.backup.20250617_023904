# Agent Communication System

## エージェント構成
- **PRESIDENT** (別セッション): 統括責任者
- **BOSS1** (MULTIAGENT:0.0): チームリーダー
- **WORKER1,2,3** (MULTIAGENT:0.1-3): 実行担当

## あなたの役割
- **president**: @instructions/stable/president.md
- **boss1**: @instructions/stable/boss.md
- **worker1,2,3**: @instructions/stable/worker.md

## 指示書モード
2つの指示書モードから選択可能：
- **challenge**: 創造的・革新的アプローチ（実験的プロジェクト、ブレインストーミング向け）
- **stable**: 堅実・効率的アプローチ（本番プロジェクト、期限重視向け）

モード切り替え：
```bash
# チャレンジ型に切り替え
./instructions/select.sh challenge

# 安定型に切り替え
./instructions/select.sh stable

# 現在のモード確認
./instructions/select.sh status
```

## 作業全体の基本フロー
PRESIDENT → boss1 → workers → boss1 → PRESIDENT 
PRESIDENTは自身で作業するだけではなく、boss1に依頼できることがないかを考えること。
boss1は自身で作業するだけではなく、各workerに依頼できることがないかを考えること。

### 相互連携
基本フローは上記の通りだが、Boss、Workerたちは相互に連絡を取り合いながら作業を進めること。
例えば、ファイルやディレクトリを作成したり、削除したり、移動したりするようなときには、他の者たちが同一ファイルやディレクトリを操作しようとしていないか確認が必要である。
また問題が発生した際には、基本フローに基づいて報告をし、上位者に判断を仰ぐこと。

## メッセージ送信
関係者間の連絡には以下のメッセージ送信ツールを使用できる。
メッセージには改行も含めることができる。
```bash
./bin/agent-send [相手] "[メッセージ]"
```

## プロジェクトを進める上での注意事項

### プロジェクト名

作業を始めるにあたり、プロジェクト名はPresidentが適切な名前を考えて名づけること。
あるいは、過去に実施してたプロジェクトを再開する場合は、プロジェクトを名を受け付けるように質問すること。もし候補があればそれを述べること。

### プロジェクト構造

各プロジェクトは以下の構造で管理される：

```
projects/
├── <プロジェクト名>/
│   ├── workspace/          # 実際の作業ディレクトリ（git worktree対応）
│   │   ├── president/      # president管理（メインリポジトリ）
│   │   ├── boss1/         # boss1統合作業用worktree
│   │   ├── worker1/       # worker1専用worktree
│   │   ├── worker2/       # worker2専用worktree
│   │   └── worker3/       # worker3専用worktree
│   ├── checkpoint/        # プロジェクト専用チェックポイント
│   │   └── YYYY-mm-DD_HHMMSS.md
│   ├── instructions/      # プロジェクト固有指示書
│   │   ├── project.md    # プロジェクト固有ルール
│   │   └── roles/        # 役割別拡張指示
│   ├── config/           # プロジェクト設定
│   │   └── worktree.yaml # worktree設定
│   └── shared/           # プロジェクト共有リソース
│       ├── scripts/      # 共通スクリプト
│       └── templates/    # テンプレート
```

### 作業ディレクトリ

- **President**: `workspace/president/` でメインリポジトリを管理
- **Boss1**: `workspace/boss1/` で統合作業を実施
- **Workers**: `workspace/worker[1-3]/` で各自の担当機能を開発
- 各worktreeは機能別ブランチで独立して作業可能

### 作業完了時のチェックポイント

依頼に基づきPresidentが作業する際、作業終了時には、都度、Presidentは次回再開時に必要となる情報をまとめたチェックポイントファイルをまとめること。
またチェックポイントファイル作成のために必要な情報がある場合には、適切にBossに依頼し、情報を集めること。
Presidentは作業開始時にチェックポイントファイルがあれば、最新のチェックポイントを読んで理解してから着手すること。
ファイルは`projects/<プロジェクト名>/checkpoint/`ディレクトリに置く。

### 仮想環境

ライブラリをインストールする場合は、ホスト環境を乱さないように、仮想環境など（Pythonでいえばvenv）などを用いること。


