#!/bin/bash

# Gemini Code 高速起動スクリプト
# Usage: ./bin/gemini-startup [project-name]

set -e

# ヘルプメッセージ
show_help() {
    cat << EOF
Gemini Code エージェント高速起動スクリプト

使用方法:
  $0 [project-name] [options]
  $0 [options]

引数:
  project-name              起動するプロジェクト名
                            （省略時は.current-projectから取得）

オプション:
  -h, --help                このヘルプを表示
  -c, --check               起動後にログイン状態を確認（遅くなります）

説明:
  全エージェントを並列で高速起動します。
  デフォルトでは起動コマンドを送信するだけで、ログイン確認は行いません。
  
  起動時間: 約2-3秒（従来版: 約17-25秒）

例:
  $0                        # 現在のプロジェクトで高速起動
  $0 myproject              # myprojectを高速起動
  $0 -c                     # 起動後にログイン状態を確認

注意:
  - ログイン状態の確認が必要な場合は -c オプションを使用してください
  - 初回起動時は個別にセッションにアタッチしてログインが必要です
EOF
}

# 引数解析
CHECK_LOGIN=false
PROJECT_NAME=""

while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_help
            exit 0
            ;;
        -c|--check)
            CHECK_LOGIN=true
            shift
            ;;
        *)
            if [[ -z "$PROJECT_NAME" ]]; then
                PROJECT_NAME="$1"
            fi
            shift
            ;;
    esac
done

# セッションプレフィックスの設定
SESSION_PREFIX=""
if [ -n "$PROJECT_NAME" ]; then
    SESSION_PREFIX="${PROJECT_NAME}-"
elif [ -f ".current-project" ]; then
    PROJECT_NAME=$(cat .current-project)
    SESSION_PREFIX="${PROJECT_NAME}-"
fi

# セッション名の定義
PRESIDENT_SESSION="${SESSION_PREFIX}president"
MULTIAGENT_SESSION="${SESSION_PREFIX}multiagent"

# 色付きメッセージ関数
info() { echo -e "\e[34m[INFO]\e[0m $1"; }
success() { echo -e "\e[32m[SUCCESS]\e[0m $1"; }
warning() { echo -e "\e[33m[WARNING]\e[0m $1"; }
error() { echo -e "\e[31m[ERROR]\e[0m $1"; }

# 高速ログイン状態チェック（並列実行）
fast_check_login_status() {
    local pids=()
    local sessions=()
    local results_dir=$(mktemp -d)
    
    info "全セッションのログイン状態を並列チェック中..."
    
    # 各セッションのチェックをバックグラウンドで実行
    for session in "$PRESIDENT_SESSION" \
                   "${MULTIAGENT_SESSION}:0.0" \
                   "${MULTIAGENT_SESSION}:0.1" \
                   "${MULTIAGENT_SESSION}:0.2" \
                   "${MULTIAGENT_SESSION}:0.3"; do
        (
            local output=$(tmux capture-pane -t $session -p 2>/dev/null || echo "")
            if echo "$output" | grep -q "^>"; then # Gemini CLIのプロンプト ">" を検出
                echo "OK" > "$results_dir/$session"
            elif echo "$output" | grep -q -i "login\|authenticate\|api key"; then # ログイン/認証関連のキーワードを検出
                echo "LOGIN_REQUIRED" > "$results_dir/$session"
            else
                echo "UNKNOWN" > "$results_dir/$session"
            fi
        ) &
        pids+=($!)
        sessions+=("$session")
    done
    
    # 全チェックの完了を待つ（最大5秒）
    local timeout=5
    local elapsed=0
    while [ $elapsed -lt $timeout ]; do
        local all_done=true
        for pid in "${pids[@]}"; do
            if kill -0 $pid 2>/dev/null; then
                all_done=false
                break
            fi
        done
        
        if $all_done; then
            break
        fi
        
        sleep 0.5
        elapsed=$((elapsed + 1))
    done
    
    # 結果の表示
    local login_required=false
    for i in "${!sessions[@]}"; do
        local session="${sessions[$i]}"
        local result_file="$results_dir/$session"
        
        if [ -f "$result_file" ]; then
            local status=$(cat "$result_file")
            case $status in
                OK)
                    success "  $session: ログイン済み"
                    ;;
                LOGIN_REQUIRED)
                    warning "  $session: ログインが必要です"
                    login_required=true
                    ;;
                *)
                    warning "  $session: 状態不明"
                    ;;
            esac
        else
            warning "  $session: チェックタイムアウト"
        fi
    done
    
    # クリーンアップ
    rm -rf "$results_dir"
    
    if $login_required; then
        echo ""
        warning "ログインが必要なセッションがあります。個別に接続してログインしてください。"
    fi
}

# 開始時刻を記録
START_TIME=$(date +%s.%N)

info "🚀 Gemini Code高速起動を開始します..."
if [ -n "$PROJECT_NAME" ]; then
    info "📁 プロジェクト: $PROJECT_NAME"
fi

# 全セッションに並列でコマンドを送信
info "⚡ 全エージェントに起動コマンドを送信中..."

# President
tmux send-keys -t "$PRESIDENT_SESSION" 'npx https://github.com/google-gemini/gemini-cli' C-m &

# Multiagent（boss1, worker1-3）
for i in {0..3}; do
    tmux send-keys -t "${MULTIAGENT_SESSION}:0.$i" 'npx https://github.com/google-gemini/gemini-cli' C-m &
done

# コマンド送信の完了を待つ（非常に短時間）
wait

# 起動時間を計算
END_TIME=$(date +%s.%N)
ELAPSED=$(echo "$END_TIME - $START_TIME" | bc)

success "✅ 起動コマンド送信完了！（所要時間: ${ELAPSED}秒）"

# ログイン状態の確認（オプション）
if $CHECK_LOGIN; then
    echo ""
    sleep 2  # 起動処理が始まるまで少し待つ
    fast_check_login_status
fi

echo ""
info "📝 セッション一覧:"
echo "  President: tmux attach -t $PRESIDENT_SESSION"
echo "  Boss1:     tmux attach -t ${MULTIAGENT_SESSION}:0.0"
echo "  Worker1:   tmux attach -t ${MULTIAGENT_SESSION}:0.1"
echo "  Worker2:   tmux attach -t ${MULTIAGENT_SESSION}:0.2"
echo "  Worker3:   tmux attach -t ${MULTIAGENT_SESSION}:0.3"

if ! $CHECK_LOGIN; then
    echo ""
    info "💡 ヒント: ログイン状態を確認するには -c オプションを使用してください"
fi
