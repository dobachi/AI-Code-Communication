#!/bin/bash

# 🔗 プロジェクト対応tmuxセッションアタッチスクリプト
# Usage: ./bin/project-attach [agent-name|session-name]
#
# ⚠️  廃止予定: このスクリプトは廃止予定です
# 📌 代わりに './bin/project attach' を使用してください
#

set -e

# 廃止予定の警告を表示
echo -e "\e[33m[WARNING]\e[0m このコマンドは廃止予定です。代わりに './bin/project attach' を使用してください。" >&2
echo "" >&2

# 色付きメッセージ関数
info() { echo -e "\e[34m[INFO]\e[0m $1"; }
success() { echo -e "\e[32m[SUCCESS]\e[0m $1"; }
error() { echo -e "\e[31m[ERROR]\e[0m $1"; }

# プロジェクトコンテキストの取得
get_project_prefix() {
    if [ -f ".current-project" ]; then
        local project=$(cat .current-project)
        echo "${project}-"
    else
        echo ""
    fi
}

# 使用方法表示
show_usage() {
    local prefix=$(get_project_prefix)
    local project_info=""
    
    if [ -n "$prefix" ]; then
        project_info=" (プロジェクト: ${prefix%%-})"
    fi
    
    cat << EOF
🔗 プロジェクト対応tmuxセッションアタッチ${project_info}

使用方法:
  $0 [エージェント名|セッション名]
  $0 --list

利用可能なエージェント:
  president   - プロジェクト統括責任者
  boss1       - チームリーダー  
  worker1     - 実行担当者A
  worker2     - 実行担当者B
  worker3     - 実行担当者C
  multiagent  - マルチエージェント全体（4分割画面）

例:
  $0 president    # presidentセッションにアタッチ
  $0 boss1        # multiagentセッションのboss1ペインにフォーカス
  $0 multiagent   # multiagentセッション全体を表示
  $0 --list       # 利用可能なセッション一覧
EOF
}

# セッション一覧表示
list_sessions() {
    local prefix=$(get_project_prefix)
    local project_info=""
    
    if [ -n "$prefix" ]; then
        project_info=" (プロジェクト: ${prefix%%-})"
    fi
    
    info "利用可能なセッション${project_info}:"
    echo "=================================="
    
    # プロジェクト固有のセッション確認
    if tmux has-session -t "${prefix}president" 2>/dev/null; then
        echo "✓ ${prefix}president - プロジェクト統括責任者"
    else
        echo "✗ ${prefix}president - 未起動"
    fi
    
    if tmux has-session -t "${prefix}multiagent" 2>/dev/null; then
        echo "✓ ${prefix}multiagent - マルチエージェント（4分割）"
        echo "  - Pane 0: boss1 (チームリーダー)"
        echo "  - Pane 1: worker1 (実行担当者A)"
        echo "  - Pane 2: worker2 (実行担当者B)"
        echo "  - Pane 3: worker3 (実行担当者C)"
    else
        echo "✗ ${prefix}multiagent - 未起動"
    fi
}

# エージェント名からセッション情報を取得
get_session_info() {
    local agent_name="$1"
    local prefix=$(get_project_prefix)
    
    case "$agent_name" in
        "president")
            echo "${prefix}president"
            ;;
        "boss1")
            echo "${prefix}multiagent:0.0"
            ;;
        "worker1")
            echo "${prefix}multiagent:0.1"
            ;;
        "worker2")
            echo "${prefix}multiagent:0.2"
            ;;
        "worker3")
            echo "${prefix}multiagent:0.3"
            ;;
        "multiagent")
            echo "${prefix}multiagent"
            ;;
        *)
            # セッション名として直接指定された場合
            if [[ "$agent_name" == *"-president" ]] || [[ "$agent_name" == *"-multiagent" ]]; then
                echo "$agent_name"
            else
                echo ""
            fi
            ;;
    esac
}

# セッションアタッチ
attach_session() {
    local target="$1"
    local session_name="${target%%:*}"
    
    # セッション存在確認
    if ! tmux has-session -t "$session_name" 2>/dev/null; then
        error "セッション '$session_name' が見つかりません"
        info "先に './bin/setup' でセッションを作成してください"
        return 1
    fi
    
    # 既にtmux内にいる場合は切り替え、そうでなければアタッチ
    if [ -n "$TMUX" ]; then
        info "tmux内から切り替え: $target"
        tmux switch-client -t "$target"
    else
        info "セッションにアタッチ: $target"
        tmux attach-session -t "$target"
    fi
}

# メイン処理
main() {
    case "$1" in
        --list|"")
            list_sessions
            ;;
        --help|-h)
            show_usage
            ;;
        *)
            local target=$(get_session_info "$1")
            
            if [ -z "$target" ]; then
                error "不明なエージェントまたはセッション: '$1'"
                echo ""
                show_usage
                exit 1
            fi
            
            attach_session "$target"
            ;;
    esac
}

main "$@"