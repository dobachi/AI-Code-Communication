#!/bin/bash
# Instructions selector script
# Switches between challenge and stable instruction sets

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
INSTRUCTIONS_DIR="$PROJECT_ROOT/instructions"
INSTRUCTION_MD_FILES=("$PROJECT_ROOT/CLAUDE.md" "$PROJECT_ROOT/GEMINI.md") # 複数の指示書ファイルに対応

# Help function
show_help() {
    cat << EOF
🔧 AI-Code-Communication - Instructions Selector

USAGE:
    ./bin/instructions-select <mode> [options]

MODES:
    challenge    Use challenge-type instructions (creative, innovative)
    stable       Use minimal-type instructions (simple, fast, bare minimum)
    iterative    Use iterative-type instructions (agile, documented, user-focused)
    status       Show current instruction mode

OPTIONS:
    -h, --help   Show this help message

EXAMPLES:
    ./bin/instructions-select challenge
    ./bin/instructions-select stable
    ./bin/instructions-select iterative
    ./bin/instructions-select status

The script will update instruction references in CLAUDE.md and GEMINI.md.
EOF
}

# Check current instruction mode for a given file
check_file_mode() {
    local file_path="$1"
    if [[ -f "$file_path" ]]; then
        if grep -q "@instructions/challenge/" "$file_path" 2>/dev/null; then
            echo "challenge"
        elif grep -q "@instructions/stable/" "$file_path" 2>/dev/null; then
            echo "stable"
        elif grep -q "@instructions/iterative/" "$file_path" 2>/dev/null; then
            echo "iterative"
        else
            echo "unknown"
        fi
    else
        echo "none"
    fi
}

# Update instruction MD files with selected instruction mode
update_instruction_md_files() {
    local mode="$1"
    local all_files_updated=true

    for md_file in "${INSTRUCTION_MD_FILES[@]}"; do
        if [[ ! -f "$md_file" ]]; then
            echo -e "${RED}Error: Instruction file not found at $md_file${NC}" >&2
            all_files_updated=false
            continue
        fi
        
        # Create backup
        local backup_dir="$PROJECT_ROOT/backups/$(basename "$md_file" .md)-md"
        mkdir -p "$backup_dir"
        cp "$md_file" "$backup_dir/$(basename "$md_file").backup.$(date +%Y%m%d_%H%M%S)"
        
        # Update instruction references
        case "$mode" in
            challenge)
                sed -i 's|@instructions/stable/|@instructions/challenge/|g' "$md_file"
                sed -i 's|@instructions/iterative/|@instructions/challenge/|g' "$md_file"
                sed -i 's|@instructions/president\.md|@instructions/challenge/president.md|g' "$md_file"
                sed -i 's|@instructions/boss\.md|@instructions/challenge/boss.md|g' "$md_file"
                sed -i 's|@instructions/worker\.md|@instructions/challenge/worker.md|g' "$md_file"
                ;;
            stable)
                sed -i 's|@instructions/challenge/|@instructions/stable/|g' "$md_file"
                sed -i 's|@instructions/iterative/|@instructions/stable/|g' "$md_file"
                sed -i 's|@instructions/president\.md|@instructions/stable/president.md|g' "$md_file"
                sed -i 's|@instructions/boss\.md|@instructions/stable/boss.md|g' "$md_file"
                sed -i 's|@instructions/worker\.md|@instructions/stable/worker.md|g' "$md_file"
                ;;
            iterative)
                sed -i 's|@instructions/challenge/|@instructions/iterative/|g' "$md_file"
                sed -i 's|@instructions/stable/|@instructions/iterative/|g' "$md_file"
                sed -i 's|@instructions/president\.md|@instructions/iterative/president.md|g' "$md_file"
                sed -i 's|@instructions/boss\.md|@instructions/iterative/boss.md|g' "$md_file"
                sed -i 's|@instructions/worker\.md|@instructions/iterative/worker.md|g' "$md_file"
                ;;
        esac
        echo -e "  ${GREEN}✅ Updated $(basename "$md_file")${NC}"
    done
    
    if [[ "$all_files_updated" == false ]]; then
        return 1 # 一部ファイルが更新できなかった場合
    fi
    return 0
}

# Show status
show_status() {
    echo -e "${BLUE}📋 Current Instruction Mode Status${NC}"
    echo
    
    local overall_mode="consistent"
    local first_mode=""

    for md_file in "${INSTRUCTION_MD_FILES[@]}"; do
        local current_mode=$(check_file_mode "$md_file")
        echo -e "  $(basename "$md_file"): ${YELLOW}${current_mode^^}${NC}" # 大文字で表示

        if [[ -z "$first_mode" ]]; then
            first_mode="$current_mode"
        elif [[ "$first_mode" != "$current_mode" ]]; then
            overall_mode="inconsistent"
        fi
    done

    echo
    if [[ "$overall_mode" == "consistent" ]]; then
        echo -e "Overall Mode: ${GREEN}${first_mode^^}${NC} (Consistent across all files)"
    else
        echo -e "${RED}Overall Mode: INCONSISTENT${NC} (Modes differ between files)"
        echo -e "${YELLOW}Warning: It is recommended to keep all instruction files in the same mode.${NC}"
    fi
    
    echo
    echo -e "${BLUE}Available instruction sets:${NC}"
    echo "  challenge/  - Creative and innovative instructions"
    echo "  stable/     - Minimal and fast instructions"
    echo "  iterative/  - Agile and documented instructions"
}

# Main logic
MODE="$1"

# Parse arguments
case "$MODE" in
    -h|--help)
        show_help
        exit 0
        ;;
    status)
        show_status
        exit 0
        ;;
    challenge|stable|iterative)
        # Validate instruction directories exist
        if [[ ! -d "$INSTRUCTIONS_DIR/$MODE" ]]; then
            echo -e "${RED}Error: Instruction directory '$MODE' not found${NC}" >&2
            echo "Available: challenge, stable, iterative"
            exit 1
        fi
        
        # Check if files exist
        for file in president.md boss.md worker.md; do
            if [[ ! -f "$INSTRUCTIONS_DIR/$MODE/$file" ]]; then
                echo -e "${RED}Error: Missing instruction file: $MODE/$file${NC}" >&2
                exit 1
            fi
        done
        ;;
    "")
        echo -e "${RED}Error: Mode is required${NC}" >&2
        echo "Use --help for usage information."
        exit 1
        ;;
    *)
        echo -e "${RED}Error: Unknown mode '$MODE'${NC}" >&2
        echo "Available modes: challenge, stable, iterative, status"
        echo "Use --help for usage information."
        exit 1
        ;;
esac

# Get current mode before change
# Note: This will only check the first file in INSTRUCTION_MD_FILES for simplicity
current_mode=$(check_file_mode "${INSTRUCTION_MD_FILES[0]}")

echo -e "${BLUE}🔧 Switching instruction mode to: ${YELLOW}$MODE${NC}"
echo

# Update instruction MD files
if ! update_instruction_md_files "$MODE"; then
    echo -e "${RED}❌ Failed to update one or more instruction files.${NC}" >&2
    exit 1
fi

# Verify the change (check all files for consistency)
new_mode_status="consistent"
for md_file in "${INSTRUCTION_MD_FILES[@]}"; do
    local file_new_mode=$(check_file_mode "$md_file")
    if [[ "$file_new_mode" != "$MODE" ]]; then
        new_mode_status="inconsistent"
        break
    fi
done

if [[ "$new_mode_status" == "consistent" ]]; then
    echo -e "${GREEN}✅ Successfully switched to $MODE mode for all instruction files.${NC}"
    echo
    
    case "$MODE" in
        challenge)
            echo -e "${YELLOW}🚀 CHALLENGE MODE ACTIVATED${NC}"
            echo "  • Creative and innovative approach"
            echo "  • Ambitious goal setting"
            echo "  • Experimental solutions encouraged"
            echo "  • Best for: brainstorming, innovation, experimentation"
            ;;
        stable)
            echo -e "${GREEN}🎯 MINIMAL MODE ACTIVATED${NC}"
            echo "  • Simple and fast approach"
            echo "  • Bare minimum functionality"
            echo "  • Single-file implementation preferred"
            echo "  • Best for: prototypes, MVPs, quick solutions"
            ;;
        iterative)
            echo -e "${BLUE}🔄 ITERATIVE MODE ACTIVATED${NC}"
            echo "  • Agile development with user feedback loops"
            echo "  • Documentation-driven development"
            echo "  • Staged feature delivery"
            echo "  • Best for: user-centered projects, long-term development"
            ;;
    esac
    
    echo
    echo -e "${BLUE}📝 Instruction files updated:${NC}"
    for md_file in "${INSTRUCTION_MD_FILES[@]}"; do
        echo "  - $(basename "$md_file")"
    done
    echo "  Previous mode (based on first file): $current_mode"
    echo "  New mode: $MODE"
    echo "  Backups created in respective 'backups' directories."
    
else
    echo -e "${RED}❌ Failed to switch mode consistently across all files.${NC}" >&2
    echo "Expected: $MODE, But some files did not update correctly."
    show_status # 不整合な状態を表示
    exit 1
fi

echo
echo -e "${BLUE}🔄 Next steps:${NC}"
echo "  1. Restart AI agent sessions for the changes to take effect (e.g., ./bin/claude-startup or ./bin/gemini-startup)"
echo "  2. Verify the new instructions are loaded correctly"
